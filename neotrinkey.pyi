from typing import Any, Iterator

from neopixel import NeoPixel
from touchio import TouchIn

class PixelProxy:
    def __init__(self, pixels: NeoPixel, *indices: int) -> None: ...
    def fill(self, colour: int) -> None: ...
    def set(self, colour: int) -> None: ...
    def clear(self) -> None: ...
    def flash(self, colour: int, times: int, duration: float) -> None: ...

class NeoTrinkeyPixels:
    n_pixels: int

    # Appease Pylance
    left: PixelProxy
    outer: PixelProxy
    right: PixelProxy
    inner: PixelProxy

    top: PixelProxy
    bottom: PixelProxy

    def __init__(self, board: Any, brightness: float = ...) -> None: ...
    def set_top_and_bottom(self, *, top: PixelProxy, bottom: PixelProxy) -> None: ...
    def fill(self, colour: int) -> None: ...
    def clear(self) -> None: ...
    def flash(self, colour: int, times: int = ..., duration: float = ...) -> None: ...
    def save(self) -> None: ...
    def restore(self) -> None: ...
    def __getitem__(self, index: int) -> tuple[int, int, int]: ...
    def __setitem__(self, index: int, value: int): ...
    def __iter__(self) -> Iterator[PixelProxy]: ...
    def __reversed__(self) -> Iterator[PixelProxy]: ...

# Emulate an enum for the pad press types.
class PadPress:
    def __init__(self, value: int) -> None: ...

class Press:
    NONE: PadPress
    TOP: PadPress
    BOTTOM: PadPress
    BOTH: PadPress

class NeoTrinkeyPads:
    left: TouchIn
    right: TouchIn
    top: TouchIn
    bottom: TouchIn

    def __init__(self, board: Any) -> None: ...
    def get_press(self, delay: float = ...) -> PadPress: ...
    def set_top_and_bottom(self, *, top: TouchIn, bottom: TouchIn) -> None: ...

    # Properties
    left_pressed: bool
    right_pressed: bool
    either_pressed: bool
    both_pressed: bool
    top_pressed: bool
    bottom_pressed: bool

class NeoTrinkey:
    pixels: NeoTrinkeyPixels
    pads: NeoTrinkeyPads

    def __init__(self, board: Any, brightness: float = ...) -> None: ...
    def _set_top_and_bottom(self) -> None: ...
